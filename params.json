{"name":"one-piece","tagline":"web, js, module, loader, CommonJS, util","body":"*******************************************************************************\r\n       _____   __   _   _____        _____   _   _____   _____   _____\r\n      /  _  \\ |  \\ | | | ____|      |  _  \\ | | | ____| /  ___| | ____|\r\n      | | | | |   \\| | | |__        | |_| | | | | |__   | |     | |__\r\n      | | | | | |\\   | |  __|       |  ___/ | | |  __|  | |     |  __|\r\n      | |_| | | | \\  | | |___       | |     | | | |___  | |___  | |___\r\n      \\_____/ |_|  \\_| |_____|      |_|     |_| |_____| \\_____| |_____|\r\n\r\n*******************************************************************************\r\n\r\nOne Piece\r\n=========\r\n\r\nMass of separate web modules.\r\nCollect pieces of small modules together to satisfy different requirements, and with module loader itself,\r\nso call it as 'One Piece', actually, its also my favorite animation name ^_^\r\n\r\nModule Loader\r\n-------------\r\n\r\n### Concepts ###\r\n\r\nModule is a piece of codes which is offered privacy of their top scope,\r\nfacility for importing singleton objects from other modules, and exporting their own APIs.\r\nPlease check [commonJS](http://wiki.commonjs.org/wiki/Modules/1.1.1) for details.\r\n\r\nAnd for web client, it uses a wrapper function `define` to implement the feature. Something like\r\n\r\n       define('hello', ['util/console'], function(require, exports, module) {\r\n              var console = require('util/console');\r\n              exports.hello = function (name) { console.info('hello ' + name); };\r\n       });\r\n\r\n### Status ###\r\n\r\nBased on the different situations, one module can have 6 status at different time.\r\n\r\n1. Uninitialized\r\n       This happens when some modules are first required by their parent module,\r\n       created by the parent module with 'uninitialized' status.\r\n\r\n2. Loading\r\n       It's easy to understand from naming, the module is under loading currently.\r\n\r\n3. Loaded & Failed\r\n       The module is loaded successfully or failed.\r\n\r\n4. Interactive\r\n       All required children modules are ready, which means on the status of 'interactive' or 'complete'.\r\n       But not be executed yet.\r\n\r\n5. Complete\r\n       When a module tree is ready, it will run the codes from the root module first,\r\n       and when first `require` function called, the definition of related module is executed,\r\n       and set status to 'complete'.\r\n\r\n### Cyclic ###\r\n\r\nAbout the module require cyclic situation, assume we have such javascript files.\r\na.js\r\n\r\n       define(function (require, exports) {\r\n              console.log('a starting');\r\n              exports.done = false;\r\n              var b = require('./b.js');\r\n              console.log('in a, b.done = %j', b.done);\r\n              exports.done = true;\r\n              console.log('a done');\r\n       });\r\n\r\nb.js\r\n\r\n       define(function (require, exports) {\r\n              console.log('b starting');\r\n              exports.done = false;\r\n              var a = require('./a.js');\r\n              console.log('in b, a.done = %j', a.done);\r\n              exports.done = true;\r\n              console.log('b done');\r\n       });\r\n\r\nmain.js\r\n\r\n       define(function (require, exports) {\r\n              console.log('main starting');\r\n              var a = require('./a.js');\r\n              var b = require('./b.js');\r\n              console.log('in main, a.done=%j, b.done=%j', a.done, b.done);\r\n       });\r\n\r\nWe can get the output\r\n\r\n       main starting\r\n       a starting\r\n       b starting\r\n       in b, a.done = false\r\n       b done\r\n       in a, b.done = true\r\n       a done\r\n       in main, a.done=true, b.done=true\r\n\r\nThe same result as [nodejs](http://nodejs.org/api/modules.html)\r\n\r\n### Usage ###\r\n\r\nYou can simple add a script like.\r\n\r\n       <script id=\"$_\" src=\"path/to/require.js\" data-config=\"./config\" data-main=\"./main\"></script>\r\n\r\nOr combine normal scripts and 'data-*' attributes feature.\r\n\r\n       <script id=\"$_\" src=\"path/to/require.js\" data-config=\"./config\"></script>\r\n       <script src=\"./main.js\" defer></script>\r\n\r\nEven, although it's highly not encouraged.\r\n\r\n       <script id=\"$_\" src=\"path/to/require.js\" data-main=\"./main\"></script>\r\n       <script src=\"./config.js\"></script>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}